@model BasketGetDto

<br />
<br />
<br />
<br />
<!-- Main Start -->
<main id="main">
    <!-- Breadcrumb Navigation Start -->
    <nav id="breadcrumb">
        <span><a href="./index.html">HOME</a></span>
        <span class="line">|</span>
        <span><a href="#" class="text-dark">CART</a></span>
    </nav>
    <!-- Breadcrumb Navigation End -->
    <!-- Wishlist Section Start -->
    <section id="wishlist" class="basketSectionArea">

    <partial name="_basketSectionPartial" model="@Model"></partial>
    </section>
    <!-- Wishlist Section End -->
</main>
<!-- Main End -->



<script>

    // const decreaseButtons=document.querySelectorAll('#decrement')
    // const increaseButtons=document.querySelectorAll('#increment')
    // const productCountInputs=document.querySelectorAll('#value')
    // const productPrices=document.querySelectorAll(".productSizePrice");
    // const productTotalPrices=document.querySelectorAll(".productSizeTotalPrice");
    // const totalOutput=document.querySelector(".totalOutput");
    // const subtotalOutput=document.querySelector(".subtotalOutput");
    // let itemsTotalPrice=parseFloat(totalOutput.textContent);
    // let subtotalPrice=parseFloat(subtotalOutput.textContent);


    // increaseButtons.forEach((increaseButton,i)=>{
    //      increaseButton.addEventListener('click',async (e)=>{
    //     e.preventDefault();
    //     let count=parseInt(productCountInputs[i].innerText);
    //     if(count>99)
    //                return;

    //     await fetch(increaseButton.href)

    //     let price=parseFloat(productPrices[i].innerText);
    //     let totalPrice=parseFloat(productTotalPrices[i].innerText);
    //     totalPrice = parseFloat((totalPrice + price).toFixed(2));

    //     subtotalPrice=parseFloat((subtotalPrice+price).toFixed(2))
    //     itemsTotalPrice=parseFloat((itemsTotalPrice+price).toFixed(2))

    //     subtotalOutput.innerHTML=subtotalPrice;
    //     totalOutput.innerHTML=itemsTotalPrice;

    //     productTotalPrices[i].innerText=totalPrice;


    //     productCountInputs[i].innerText=count+1;
    // })
    // })


    // decreaseButtons.forEach((decreaseButton,i)=>{
    //    decreaseButton.addEventListener('click',async (e)=>{
    //     e.preventDefault();
    //     let count=parseInt(productCountInputs[i].innerText);
    //     if(count<2)
    //                return;

    //                 await fetch(decreaseButton.href)

    //     let price=parseFloat(productPrices[i].innerText);
    //     let totalPrice=parseFloat(productTotalPrices[i].innerText);
    //     totalPrice = parseFloat((totalPrice - price).toFixed(2));

    //      subtotalPrice=parseFloat((subtotalPrice-price).toFixed(2))
    //     itemsTotalPrice=parseFloat((itemsTotalPrice-price).toFixed(2))

    //     subtotalOutput.innerHTML=subtotalPrice;
    //     totalOutput.innerHTML=itemsTotalPrice;


    //     productTotalPrices[i].innerText=totalPrice;

    //     productCountInputs[i].innerText=count-1;
    // })
    // })


</script>