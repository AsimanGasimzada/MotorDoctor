// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorDoctor.DataAccess.Contexts;

#nullable disable

namespace MotorDoctor.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241207120305_addedAdvertisement")]
    partial class addedAdvertisement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.AboutDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(9196)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.HasIndex("LanguageId", "AboutId")
                        .IsUnique();

                    b.ToTable("AboutDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.AttendanceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttedanceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AttedanceId");

                    b.HasIndex("LanguageId", "AttedanceId")
                        .IsUnique();

                    b.ToTable("AttendanceDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeId");

                    b.HasIndex("AppUserId", "ProductSizeId")
                        .IsUnique();

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LocationPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.BranchDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("WorkHours")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("LanguageId", "BranchId")
                        .IsUnique();

                    b.ToTable("BranchDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.BrandDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("LanguageId", "BrandId")
                        .IsUnique();

                    b.ToTable("BrandDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.CategoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId", "CategoryId")
                        .IsUnique();

                    b.ToTable("CategoryDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments", t =>
                        {
                            t.HasCheckConstraint("CK_Comment_Rating_Range", "[Rating] >= 0 AND [Rating] <= 5");
                        });
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AZE",
                            ImagePath = "https://res.cloudinary.com/dlilcwizx/image/upload/v1730241623/motordoctor.az/fajaznl6ilmlbmo05xbw.png",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ENG",
                            ImagePath = "https://res.cloudinary.com/dlilcwizx/image/upload/v1730241623/motordoctor.az/mygg6rnd9rkxwc6vlljx.png",
                            Name = "English"
                        },
                        new
                        {
                            Id = 3,
                            Code = "RUS",
                            ImagePath = "https://res.cloudinary.com/dlilcwizx/image/upload/v1730241623/motordoctor.az/upkqfbyfpy7rvmjdwfsm.png",
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("StaticPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId", "LanguageId")
                        .IsUnique();

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "IsMain")
                        .IsUnique()
                        .HasFilter("[IsMain] = 1");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Size")
                        .IsUnique();

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "Logo"
                        },
                        new
                        {
                            Id = 2,
                            Key = "Telefon1"
                        },
                        new
                        {
                            Id = 3,
                            Key = "Telefon2"
                        },
                        new
                        {
                            Id = 4,
                            Key = "FacebookLink"
                        },
                        new
                        {
                            Id = 5,
                            Key = "InstagramLink"
                        },
                        new
                        {
                            Id = 6,
                            Key = "LinkedinLink"
                        },
                        new
                        {
                            Id = 7,
                            Key = "Unvan"
                        },
                        new
                        {
                            Id = 8,
                            Key = "IsSaatlari"
                        },
                        new
                        {
                            Id = 9,
                            Key = "Copyright"
                        },
                        new
                        {
                            Id = 10,
                            Key = "Email"
                        },
                        new
                        {
                            Id = 11,
                            Key = "WhatsAppLink"
                        },
                        new
                        {
                            Id = 12,
                            Key = "WebsiteTitle"
                        },
                        new
                        {
                            Id = 13,
                            Key = "WebsiteShortDescription"
                        },
                        new
                        {
                            Id = 14,
                            Key = "WebsiteLongDescription"
                        },
                        new
                        {
                            Id = 15,
                            Key = "WebsiteAuthor"
                        },
                        new
                        {
                            Id = 16,
                            Key = "WebsiteKeywords"
                        },
                        new
                        {
                            Id = 17,
                            Key = "WhyChooseUs"
                        });
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.SettingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("LanguageId", "SettingId")
                        .IsUnique();

                    b.ToTable("SettingDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            SettingId = 1,
                            Value = "logo.png"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            SettingId = 1,
                            Value = "logo.png"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 3,
                            SettingId = 1,
                            Value = "logo.png"
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 1,
                            SettingId = 2,
                            Value = "+994 51 434 15 23"
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = 2,
                            SettingId = 2,
                            Value = "+994 51 434 15 23"
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = 3,
                            SettingId = 2,
                            Value = "+994 51 434 15 23"
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = 1,
                            SettingId = 3,
                            Value = "+994 51 434 15 23"
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = 2,
                            SettingId = 3,
                            Value = "+994 51 434 15 23"
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = 3,
                            SettingId = 3,
                            Value = "+994 51 434 15 23"
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = 1,
                            SettingId = 4,
                            Value = "facebook.png"
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = 2,
                            SettingId = 4,
                            Value = "facebook.com"
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = 3,
                            SettingId = 4,
                            Value = "facebook.com"
                        },
                        new
                        {
                            Id = 13,
                            LanguageId = 1,
                            SettingId = 5,
                            Value = "instagramcomg"
                        },
                        new
                        {
                            Id = 14,
                            LanguageId = 2,
                            SettingId = 5,
                            Value = "instagramcomg"
                        },
                        new
                        {
                            Id = 15,
                            LanguageId = 3,
                            SettingId = 5,
                            Value = "instagramcomg"
                        },
                        new
                        {
                            Id = 16,
                            LanguageId = 1,
                            SettingId = 6,
                            Value = "linkedin.com"
                        },
                        new
                        {
                            Id = 17,
                            LanguageId = 2,
                            SettingId = 6,
                            Value = "linkedin.com"
                        },
                        new
                        {
                            Id = 18,
                            LanguageId = 3,
                            SettingId = 6,
                            Value = "linkedin.com"
                        },
                        new
                        {
                            Id = 19,
                            LanguageId = 1,
                            SettingId = 7,
                            Value = "address.com"
                        },
                        new
                        {
                            Id = 20,
                            LanguageId = 2,
                            SettingId = 7,
                            Value = "address.com"
                        },
                        new
                        {
                            Id = 21,
                            LanguageId = 3,
                            SettingId = 7,
                            Value = "address.com"
                        },
                        new
                        {
                            Id = 22,
                            LanguageId = 1,
                            SettingId = 8,
                            Value = "MON-SAT: 09:00-19:00"
                        },
                        new
                        {
                            Id = 23,
                            LanguageId = 2,
                            SettingId = 8,
                            Value = "MON-SAT: 09:00-19:00"
                        },
                        new
                        {
                            Id = 24,
                            LanguageId = 3,
                            SettingId = 8,
                            Value = "MON-SAT: 09:00-19:00"
                        },
                        new
                        {
                            Id = 25,
                            LanguageId = 1,
                            SettingId = 9,
                            Value = "© 2023 Qode Interactive , All Rights Reserved"
                        },
                        new
                        {
                            Id = 26,
                            LanguageId = 2,
                            SettingId = 9,
                            Value = "© 2023 Qode Interactive , All Rights Reserved"
                        },
                        new
                        {
                            Id = 27,
                            LanguageId = 3,
                            SettingId = 9,
                            Value = "© 2023 Qode Interactive , All Rights Reserved"
                        },
                        new
                        {
                            Id = 28,
                            LanguageId = 1,
                            SettingId = 10,
                            Value = "info@motordoctor.az"
                        },
                        new
                        {
                            Id = 29,
                            LanguageId = 2,
                            SettingId = 10,
                            Value = "info@motordoctor.az"
                        },
                        new
                        {
                            Id = 30,
                            LanguageId = 3,
                            SettingId = 10,
                            Value = "info@motordoctor.az"
                        },
                        new
                        {
                            Id = 31,
                            LanguageId = 1,
                            SettingId = 11,
                            Value = "https://wa.me/994501234567"
                        },
                        new
                        {
                            Id = 32,
                            LanguageId = 2,
                            SettingId = 11,
                            Value = "https://wa.me/994501234567"
                        },
                        new
                        {
                            Id = 33,
                            LanguageId = 3,
                            SettingId = 11,
                            Value = "https://wa.me/994501234567"
                        },
                        new
                        {
                            Id = 34,
                            LanguageId = 1,
                            SettingId = 12,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 35,
                            LanguageId = 2,
                            SettingId = 12,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 36,
                            LanguageId = 3,
                            SettingId = 12,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 37,
                            LanguageId = 1,
                            SettingId = 13,
                            Value = "Online Shop"
                        },
                        new
                        {
                            Id = 38,
                            LanguageId = 2,
                            SettingId = 13,
                            Value = "Online Shop"
                        },
                        new
                        {
                            Id = 39,
                            LanguageId = 3,
                            SettingId = 13,
                            Value = "Online Shop"
                        },
                        new
                        {
                            Id = 40,
                            LanguageId = 1,
                            SettingId = 14,
                            Value = "Online Shop"
                        },
                        new
                        {
                            Id = 41,
                            LanguageId = 2,
                            SettingId = 14,
                            Value = "Online Shop"
                        },
                        new
                        {
                            Id = 42,
                            LanguageId = 3,
                            SettingId = 14,
                            Value = "Online Shop"
                        },
                        new
                        {
                            Id = 43,
                            LanguageId = 1,
                            SettingId = 15,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 44,
                            LanguageId = 2,
                            SettingId = 15,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 45,
                            LanguageId = 3,
                            SettingId = 15,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 46,
                            LanguageId = 1,
                            SettingId = 16,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 47,
                            LanguageId = 2,
                            SettingId = 16,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 48,
                            LanguageId = 3,
                            SettingId = 16,
                            Value = "MotorDoctor"
                        },
                        new
                        {
                            Id = 49,
                            LanguageId = 1,
                            SettingId = 17,
                            Value = "KEYFİYYƏTİN ADI MOTORDOCTOR"
                        },
                        new
                        {
                            Id = 50,
                            LanguageId = 2,
                            SettingId = 17,
                            Value = "KEYFİYYƏTİN ADI MOTORDOCTOR"
                        },
                        new
                        {
                            Id = 51,
                            LanguageId = 3,
                            SettingId = 17,
                            Value = "KEYFİYYƏTİN ADI MOTORDOCTOR"
                        });
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ButtonPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.SliderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ButtonTitle")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SliderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.HasIndex("LanguageId", "SliderId")
                        .IsUnique();

                    b.ToTable("SliderDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        });
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.StatusDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("LanguageId", "StatusId")
                        .IsUnique();

                    b.ToTable("StatusDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            Name = "Sifariş edilib",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            Name = "Ordered",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 3,
                            Name = "Заказал",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 1,
                            Name = "Yolda",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = 2,
                            Name = "On the Way",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = 3,
                            Name = "В пути",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = 1,
                            Name = "Sifariş tamamlandı",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = 2,
                            Name = "Order Is Done",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = 3,
                            Name = "Заказ выполнен",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = 1,
                            Name = "Ləğv edildi",
                            StatusId = 4
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = 2,
                            Name = "Cancelled",
                            StatusId = 4
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = 3,
                            Name = "Отменено",
                            StatusId = 4
                        });
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductSizeId");

                    b.HasIndex("AppUserId", "ProductSizeId")
                        .IsUnique();

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.AboutDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.About", "About")
                        .WithMany("AboutDetails")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.AttendanceDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Attendance", "Attedance")
                        .WithMany("AttendanceDetails")
                        .HasForeignKey("AttedanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany("AttedanceDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attedance");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.BasketItem", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.BranchDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Branch", "Branch")
                        .WithMany("BranchDetails")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany("BranchDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.BrandDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Brand", "Brand")
                        .WithMany("BrandDetails")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany("BrandDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Category", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.CategoryDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Comment", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Order", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("MotorDoctor.Core.Entities.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Product", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.ProductDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.ProductImage", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.ProductSize", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.SettingDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Setting", "Setting")
                        .WithMany("SettingDetails")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.SliderDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany("SliderDetails")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Slider", "Slider")
                        .WithMany("SliderDetails")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.StatusDetail", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.Status", "Status")
                        .WithMany("StatusDetails")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.WishlistItem", b =>
                {
                    b.HasOne("MotorDoctor.Core.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorDoctor.Core.Entities.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.About", b =>
                {
                    b.Navigation("AboutDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Attendance", b =>
                {
                    b.Navigation("AttendanceDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Branch", b =>
                {
                    b.Navigation("BranchDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Brand", b =>
                {
                    b.Navigation("BrandDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Category", b =>
                {
                    b.Navigation("CategoryDetails");

                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Language", b =>
                {
                    b.Navigation("AttedanceDetails");

                    b.Navigation("BranchDetails");

                    b.Navigation("BrandDetails");

                    b.Navigation("CategoryDetails");

                    b.Navigation("SliderDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Setting", b =>
                {
                    b.Navigation("SettingDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Slider", b =>
                {
                    b.Navigation("SliderDetails");
                });

            modelBuilder.Entity("MotorDoctor.Core.Entities.Status", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("StatusDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
